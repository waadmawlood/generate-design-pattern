namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Repositories\{{name}}Repository;
use App\Models\{{name}};
use App\Http\Requests\{{name}}Form;
use App\Http\Requests\Pagination;
use Symfony\Component\HttpFoundation\Response;

class {{name}}Controller extends Controller
{
    private ${{name}}Repository;
    public function __construct()
    {
        //$this->middleware('role:admin', ['only' => ['indexAll', 'store', 'update', 'change', 'show', 'destroy', 'delete', 'restore']]);
        $this->{{name}}Repository = new {{name}}Repository(new {{model}}());
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Pagination $request)
    {
        return $this->{{name}}Repository->index($request->take);
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function indexAll(Pagination $request)
    {
        return $this->{{name}}Repository->index($request->take , null , null , $request->trash);
    }


    /**
     * Display the specified resource if own me.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function indexMe(Pagination $request)
    {
        $find = [
            'column' => 'user_id',
            'condition' => '=',
            'value' => auth()->user()->id
        ];
        return $this->{{name}}Repository->index($request->take, $find);
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{name}}Form $request)
    {
        $data = $request->validated();
        $response = $this->{{name}}Repository->create($data);
        return response()->json([
            'success' => true,
            'message' => '{{name}} created successfully',
            'data' => $response

        ], Response::HTTP_OK);
    }

    /**
     * Display the specified resource.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        return $this->{{name}}Repository->show($id);
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @param  \App\\$name  $name
     * @return \Illuminate\Http\Response
     */
    public function update({{name}}Form $request, $id)
    {
        $data = $request->validated();
        $this->{{name}}Repository->update($id, $data);
        return response()->json([
            'success' => true,
            'message' => '{{name}} updated successfully. id ' . $id,
        ], Response::HTTP_OK);
    }

    /**
     * Update change the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  Integer $id
     * @return \Illuminate\Http\Response
     */
    public function change(Request $request, $id)
    {
        if(! $request->has('status')){
            return response()->json(['success' => false,'message' => '{{name}} Model not Found. id ' . $id,], 404);
        }
        $data['status'] = ! {{name}}::findOrFail($id)->status;
        $this->{{name}}Repository->update($id, $data);
        return response()->json([
            'success' => true,
            'message' => '{{name}} updated Toggle successfully. id ' . $id,
        ], Response::HTTP_OK);
    }

    /**
     * Soft Delete the specified resource from storage.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function delete($id)
    {
        $this->{{name}}Repository->delete($id);
        return response()->json([
            'success' => true,
            'message' => '{{name}} Soft Deleted successfully. id ' . $id,
        ], Response::HTTP_OK);
    }

    /**
     * Force Delete the specified resource from storage.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $this->{{name}}Repository->destroy($id);
        return response()->json([
            'success' => true,
            'message' => '{{name}} Force Deleted successfully. id ' . $id,
        ], Response::HTTP_OK);
    }

    /**
     * Restore the specified resource from Trashed.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function restore($id)
    {
        $this->{{name}}Repository->restore($id);
        return response()->json([
            'success' => true,
            'message' => '{{name}} Restored successfully. id ' . $id,
        ], Response::HTTP_OK);
    }

}
