namespace App\Http\Controllers;

use App\Http\Requests\Pagination;
use App\Http\Repositories\{{name}}Repository;
use App\Http\Requests\{{name}}Form;
use App\Models\{{name}};

class {{name}}Controller extends Controller
{
    private ${{name}}Repository;

    public function __construct()
    {
        //$this->middleware('role:Admin', ['only' => ['getAll', 'store', 'update', 'change', 'show', 'destroy', 'delete', 'restore']]);
        $this->{{name}}Repository = new {{name}}Repository(new {{model}}());
    }

    /**
     * Display a listing of the resource.
     *
     * @param \App\Http\Requests\Pagination $request
     * @return \Illuminate\Http\Response
     */
    public function index(Pagination $request)
    {
        return $this->{{name}}Repository->index($request->take, $request->find, $request->where);
    }

    /**
     * Display a listing of the resource.
     *
     * @param \App\Http\Requests\Pagination $request
     * @return \Illuminate\Http\Response
     */
    public function getAll(Pagination $request)
    {
        $whereHas = [];
        $counts = [];
        return $this->{{name}}Repository->index($request->take, $request->find, $request->where, $request->trash, $whereHas , $counts);
    }

    /**
     * Display the specified resource if own me.
     *
     * @param \App\Http\Requests\Pagination $request
     * @return \Illuminate\Http\Response
     */
    public function getMe(Pagination $request)
    {
        $find = $this->getMeCondition('user_id', '=');

        return $this->{{name}}Repository->index($request->take, $find);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{name}}Form $request)
    {
        $data = $request->validated();
        $response = $this->{{name}}Repository->create($data);

        $response->addMedia($data['image'] ?? null);

        return $this->jsonResponce('{{name}} created successfully', $response);
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function show({{model}} {{name_small}})
    {
        return $this->{{name}}Repository->show({{name_small}});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function update({{name}}Form $request, {{model}} {{name_small}})
    {
        $data = $request->validated();
        $this->{{name}}Repository->update({{name_small}}, $data);

        {{name_small}}->syncMedia($data['image'] ?? null);

        return $this->jsonResponce('{{name}} updated successfully. name ' . {{name_small}}->name);
    }

    /**
     * Update change the specified resource in storage.
     *
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function change({{model}} {{name_small}})
    {
        $data['status'] = ! ${{name_small}}->status;
        $this->{{name}}Repository->update(${{name_small}}, $data);

        return $this->jsonResponce('{{name}} status updated Toggle successfully. name ' . {{name_small}}->name);
    }

    /**
     * Soft Delete the specified resource from storage.
     *
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function delete({{model}} {{name_small}})
    {
        $this->{{name}}Repository->delete(${{name_small}});

        return $this->jsonResponce('{{name}} Soft Deleted successfully. name ' . {{name_small}}->name);
    }

    /**
     * Force Delete the specified resource from storage.
     *
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{model}} {{name_small}})
    {
        $this->{{name}}Repository->destroy(${{name_small}});

        return $this->jsonResponce('{{name}} Force Deleted successfully. name ' . {{name_small}}->name);
    }

    /**
     * Restore the specified resource from Trashed.
     *
     * @param  \App\Models\{{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function restore({{model}} {{name_small}})
    {
        $this->{{name}}Repository->restore(${{name_small}});

        return $this->jsonResponce('{{name}} Restored successfully. name ' . {{name_small}}->name);
    }
}
