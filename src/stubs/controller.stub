namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Repositories\{{name}}Repository;
use App\Models\{{name}};
use App\Http\Requests\{{name}}Form;
use App\Http\Requests\Pagination;
use Symfony\Component\HttpFoundation\Response;

class {{name}}Controller extends Controller
{
    private ${{name}}Repository;
    public function __construct()
    {
        //$this->middleware('role:Admin', ['only' => ['getAll', 'store', 'update', 'change', 'show', 'destroy', 'delete', 'restore']]);
        $this->{{name}}Repository = new {{name}}Repository(new {{model}}());
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Pagination $request)
    {
        return $this->{{name}}Repository->index($request->take, $request->find, $request->where);
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getAll(Pagination $request)
    {
        return $this->{{name}}Repository->index($request->take , $request->find , $request->where , $request->trash);
    }


    /**
     * Display the specified resource if own me.
     *
     * @return \Illuminate\Http\Response
     */
    public function getMe(Pagination $request)
    {
        $find = [
            'column' => 'user_id',
            'condition' => '=',
            'value' => auth()->user()->id
        ];
        return $this->{{name}}Repository->index($request->take, $find);
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{name}}Form $request)
    {
        $data = $request->validated();
        $response = $this->{{name}}Repository->create($data);

        if($request->file('image')){
            $response->addMedia($request->file('image'));
        }

        return response()->json([
            'success' => true,
            'message' => '{{name}} created successfully',
            'data' => $response

        ], Response::HTTP_OK);
    }

    /**
     * Display the specified resource.
     *
     * @param  Integer  $id
     * @return \Illuminate\Http\Response
     */
    public function show({{model}} {{name_small}})
    {
        return $this->{{name}}Repository->show({{name_small}});
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\{{name}}Form  $request
     * @param  {{model}} {{name_small}}
     * @param  \App\\$name  $name
     * @return \Illuminate\Http\Response
     */
    public function update({{name}}Form $request, {{model}} {{name_small}})
    {
        $data = $request->validated();
        $this->{{name}}Repository->update({{name_small}}, $data);

        // $response = $this->{{name}}Repository->show({{name_small}});
        // $response->destroyMediaArray($response->media->pluck('id')->toArray());
        // $response->media()->forceDelete();

        return response()->json([
            'success' => true,
            'message' => '{{name}} updated successfully. id ' . {{name_small}}->id,
        ], Response::HTTP_OK);
    }

    /**
     * Update change the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  {{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function change(Request $request, {{model}} {{name_small}})
    {
        // if(! $request->has('status')){
        //     return response()->json(['success' => false,'message' => '{{name}} Model not Found. id ' . ${{name_small}}->id,], 404);
        // }
        $data['status'] = ! ${{name_small}}->status;
        $this->{{name}}Repository->update(${{name_small}}, $data);
        return response()->json([
            'success' => true,
            'message' => '{{name}} status updated Toggle successfully. id ' . ${{name_small}}->id,
        ], Response::HTTP_OK);
    }

    /**
     * Soft Delete the specified resource from storage.
     *
     * @param  {{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function delete({{model}} {{name_small}})
    {
        $this->{{name}}Repository->delete(${{name_small}});
        return response()->json([
            'success' => true,
            'message' => '{{name}} Soft Deleted successfully. id ' . ${{name_small}}->id,
        ], Response::HTTP_OK);
    }

    /**
     * Force Delete the specified resource from storage.
     *
     * @param  {{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{model}} {{name_small}})
    {
        $this->{{name}}Repository->destroy(${{name_small}});
        return response()->json([
            'success' => true,
            'message' => '{{name}} Force Deleted successfully. id ' . ${{name_small}}->id,
        ], Response::HTTP_OK);
    }

    /**
     * Restore the specified resource from Trashed.
     *
     * @param  {{model}} {{name_small}}
     * @return \Illuminate\Http\Response
     */
    public function restore({{model}} {{name_small}})
    {
        $this->{{name}}Repository->restore(${{name_small}});
        return response()->json([
            'success' => true,
            'message' => '{{name}} Restored successfully. id ' . ${{name_small}}->id,
        ], Response::HTTP_OK);
    }

}
